// src/redux/todoSlice.js
import { createSlice } from '@reduxjs/toolkit';

// Create the initial state
const initialState = {
  todos: [
    {
        "w": 2,
        "h": 1,
        "x": 0,
        "y": 0,
        "i": "a",
        "minW": 2,
        "maxW": 4,
        "moved": false,
        "static": false
    }
    // ,
    // {
    //     "w": 1,
    //     "h": 1,
    //     "x": 0,
    //     "y": 1,
    //     "i": "b",
    //     "moved": false,
    //     "static": false
    // },
    // {
    //     "w": 1,
    //     "h": 1,
    //     "x": 2,
    //     "y": 0,
    //     "i": "c",
    //     "moved": false,
    //     "static": false
    // },
    // {
    //     "w": 1,
    //     "h": 1,
    //     "x": 3,
    //     "y": 0,
    //     "i": "d",
    //     "moved": false,
    //     "static": false
    // }
    // ,
    // {
    //     "w": 1,
    //     "h": 1,
    //     "x": 2,
    //     "y": 1,
    //     "i": "e",
    //     "moved": false,
    //     "static": false
    // },
    // {
    //     "w": 1,
    //     "h": 1,
    //     "x": 1,
    //     "y": 1,
    //     "i": "f",
    //     "moved": false,
    //     "static": false
    // },
    // {
    //     "w": 1,
    //     "h": 1,
    //     "x": 2,
    //     "y": 2,
    //     "i": "g",
    //     "moved": false,
    //     "static": false
    // },
    // {
    //     "w": 1,
    //     "h": 1,
    //     "x": 0,
    //     "y": 2,
    //     "i": "h",
    //     "moved": false,
    //     "static": false
    // },
    // {
    //     "w": 1,
    //     "h": 1,
    //     "x": 2,
    //     "y": 3,
    //     "i": "i",
    //     "moved": false,
    //     "static": false
    // },
    // {
    //     "w": 1,
    //     "h": 1,
    //     "x": 1,
    //     "y": 2,
    //     "i": "j",
    //     "moved": false,
    //     "static": false
    // }
],
};

const layout2 =[
    {
        "w": 2,
        "h": 1,
        "x": 0,
        "y": 0,
        "i": "a",
        "moved": false,
        "static": false
    },
    {
        "w": 1,
        "h": 1,
        "x": 0,
        "y": 1,
        "i": "b",
        "moved": false,
        "static": false
    },
    {
        "w": 1,
        "h": 1,
        "x": 2,
        "y": 0,
        "i": "c",
        "moved": false,
        "static": false
    },
    {
        "w": 1,
        "h": 1,
        "x": 3,
        "y": 0,
        "i": "d",
        "moved": false,
        "static": false
    },
    {
        "w": 1,
        "h": 1,
        "x": 6,
        "y": 0,
        "i": "e",
        "moved": false,
        "static": false
    },
    {
        "w": 1,
        "h": 1,
        "x": 1,
        "y": 1,
        "i": "f",
        "moved": false,
        "static": false
    },
    {
        "w": 1,
        "h": 1,
        "x": 5,
        "y": 1,
        "i": "g",
        "moved": false,
        "static": false
    },
    {
        "w": 1,
        "h": 1,
        "x": 0,
        "y": 2,
        "i": "h",
        "moved": false,
        "static": false
    },
    {
        "w": 1,
        "h": 1,
        "x": 2,
        "y": 1,
        "i": "i",
        "moved": false,
        "static": false
    },
    {
        "w": 1,
        "h": 1,
        "x": 5,
        "y": 0,
        "i": "j",
        "moved": false,
        "static": false
    }
]
// Create the slice
const todoSlice = createSlice({
  name: 'todos',
  initialState,
  reducers: {
    addTodo: (state, action) => {
      state.todos.push({
        id: Date.now(), // Unique ID for the todo
        text: action.payload,
        completed: false,
      });
    },
    removeTodo: (state, action) => {
      state.todos = state.todos.filter(todo => todo.id !== action.payload);
    },
    toggleTodo: (state, action) => {
        state.todos=[];
     state.todos=generateRandomLayout(10, 1, 1, 12)
    },
  },
});

// Export the actions generated by the slice
export const { addTodo, removeTodo, toggleTodo } = todoSlice.actions;

// Export the reducer to be used in the store
export default todoSlice.reducer;


const generateRandomLayout = (itemsCount, maxWidth, maxHeight, maxCols) => {
    const layout = [];
    const usedPositions = new Set(); // To keep track of used x, y positions

    for (let i = 0; i < itemsCount; i++) {
        let w = Math.floor(Math.random() * maxWidth) + 1; // Random width between 1 and maxWidth
        let h = Math.floor(Math.random() * maxHeight) + 1; // Random height between 1 and maxHeight
        let x, y;

        do {
            // Generate random x and y positions
            x = Math.floor(Math.random() * maxCols);
            y = Math.floor(Math.random() * 5); // Assuming a max height of 10 rows
        } while (usedPositions.has(`${x},${y}`)); // Ensure the position is not already used

        usedPositions.add(`${x},${y}`); // Mark this position as used

        layout.push({
            w,
            h,
            x,
            y,
            i: String.fromCharCode(97 + i), // Unique identifier (a, b, c, ...)
            moved: false,
            static: false
        });
    }

    return layout;
};

// Usage
